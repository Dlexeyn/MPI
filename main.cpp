#include <mpi.h>
#include <cstdio>
const int BUFF_SIZE = 100;

std::string getRandomString(std::map<std::string, std::string> &food){
    auto it = food.begin();
    std::advance(it, rand() % food.size());
    return it->first;
}

int main(int argc, char** argv) {
    int ProcNum, ProcRank, RecvRank;

    std::map<std::string, std::string> foodMap{
            {"арбуз", "съедобное"},
            {"валенок", "несъедобное"},     // 2
            {"тыква", "съедобное"},
            {"пирог", "съедобное"},         // 4
            {"торт", "съедобное"},
            {"печенье", "съедобное"},
            {"автомобиль", "несъедобное"},
            {"голова", "несъедобное"},      // 8
            {"уравнение", "несъедобное"},
            {"градиент", "несъедобное"},
            {"производная", "несъедобное"},
            {"яблоко","съедобное"},
            {"груша","съедобное"},
            {"гриб","съедобное"},
            {"камень","несъедобное"},
            {"мяч","несъедобное"},          // 16
            {"банан","съедобное"},
            {"арбуз","съедобное"},
            {"капуста","съедобное"},
            {"брокколи","съедобное"},
            {"креветка","съедобное"},
            {"морковь","съедобное"},
            {"картошка","съедобное"},
            {"печенье","съедобное"},
            {"хлеб","съедобное"},
            {"мыло","несъедобное"},
            {"кардамон","съедобное"},
            {"огурец","съедобное"},
            {"колбаса","съедобное"},
            {"конфета","съедобное"},
            {"мышь","несъедобное"},         // 32
            {"камень","несъедобное"},
            {"монета","несъедобное"},
            {"пластик","несъедобное"},
            {"фильм", "несъедобное"},
            {"самолет", "несъедобное"},
            {"поезд", "несъедобное"},
            {"программа", "несъедобное"},
            {"конфета","съедобное"},
            {"сок","съедобное"},
            {"огурец","съедобное"},
            {"перец","съедобное"},
            {"абрикос","съедобное"},        // 44
            {"банан", "съедобное"},
            {"авокадо", "съедобное"},
            {"ананас", "съедобное"},
            {"камень", "несъедобное"},
            {"мяч", "несъедобное"},
            {"помидор", "съедобное"},
            {"огурец", "съедобное"},
            {"капуста", "съедобное"},
            {"чеснок", "съедобное"},
            {"картошка", "съедобное"},
            {"каштан", "съедобное"},
            {"лимон", "съедобное"},
            {"печенье", "съедобное"},
            {"хлеб", "съедобное"},
            {"камень", "несъедобное"},
            {"мыло", "несъедобное"},
            {"орех", "съедобное"},
            {"колбаса", "съедобное"},
            {"конфета", "съедобное"},
            {"батон", "съедобное"},         // 64
            {"яйцо", "съедобное"},
            {"чай", "съедобное"},
            {"молоко", "съедобное"},
            {"авокадо", "съедобное"},
            {"лук", "съедобное"},
            {"рыба", "съедобное"},
            {"мясо", "съедобное"},
            {"сахар", "съедобное"},
            {"мука", "съедобное"},
            {"соль", "съедобное"},
            {"мед", "съедобное"},
            {"кофе", "съедобное"},
            {"чипсы", "съедобное"},
            {"гвозди", "несъедобное"},
            {"пластик", "несъедобное"},
            {"батон", "съедобное"},
            {"колбаса", "съедобное"},
            {"конфета", "съедобное"},
            {"каша", "съедобное"}
    };

    double start = 0, end = 0;

    MPI_Init(&argc, &argv);

    MPI_Comm_size(MPI_COMM_WORLD,&ProcNum);
    MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);

    MPI_Barrier(MPI_COMM_WORLD);
    start = MPI_Wtime();

    if (ProcRank == 0) {
        std::string mes;
        mes = getRandomString(foodMap);
        std::cout << "Отправляем: " << mes << '\n';
        for (int i = 1; i < ProcNum; i++) {
            mes = getRandomString(foodMap);
            std::cout << "Отправляем процессу " << i << " : " << mes << '\n';
            MPI_Send(mes.c_str(),
                     mes.size() + 1,
                     MPI_CHAR,
                     i, 0,
                     MPI_COMM_WORLD);
        }

        for (int i = 1; i < ProcNum; i++) {
            char recv_mes[BUFF_SIZE];
            MPI_Recv(&recv_mes,
                     BUFF_SIZE,
                     MPI_CHAR,
                     i, 0,
                     MPI_COMM_WORLD,
                     MPI_STATUS_IGNORE);
            std::cout << "Процесс " << i << " отвечает: " << recv_mes << '\n';
        }
    }
    else {
        char mes[BUFF_SIZE];
        MPI_Recv(&mes,
                 BUFF_SIZE,
                 MPI_CHAR,
                 0, 0,
                 MPI_COMM_WORLD,
                 MPI_STATUS_IGNORE);
        auto val = foodMap[std::string(mes)];
        MPI_Send(val.c_str(),
                 val.size() + 1,
                 MPI_CHAR,
                 0,
                 0,
                 MPI_COMM_WORLD);
    }

    MPI_Barrier(MPI_COMM_WORLD);
    end = MPI_Wtime();

    MPI_Finalize();

    if (ProcRank == 0) {
        printf("%f\n", end - start);
    }
    return 0;
}